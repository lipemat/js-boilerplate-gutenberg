const webpack = require( 'webpack' );

const {RuntimeModule, Template} = webpack;


/**
 * This is a fix for the react-refresh webpack plugin.
 *
 * React refresh expects the `ReactRefreshRuntime` to be available in the global scope
 * if it is added to the Webpack `externals` option.
 *
 * To resolve the issue when React is not loaded, we inject a dummy `ReactRefreshRuntime` variable
 * when Webpack Dev Server is running.
 *
 * @notice DO NOT use this on production builds!
 */

class ReactRefreshFixRuntime extends RuntimeModule {
	constructor() {
		super( 'js-boilerplate-gutenberg', webpack.RuntimeModule.STAGE_NORMAL );
	}

	generate() {
		return Template.asString( [
			`
// Mocked ReactRefreshRuntime.
// Generated by @lipemat/js-boilerplate-gutenberg because React Refresh is not loaded.
// If you expect React Refresh to be loaded, enqueue 'wp-react-refresh-runtime'.

if ( 'undefined' === typeof ReactRefreshRuntime ) {
	console.debug( '@lipemat/js-boilerplate-gutenberg: React Refresh Runtime is not loaded.' );
	window.ReactRefreshRuntime = {
		injectIntoGlobalHook: function () {},
		isLikelyComponentType: function () {},
	}
}`,
		] );
	}
}

class ReactRefreshFix {
	apply( compiler ) {
		compiler.hooks.compilation.tap( 'ReactRefreshFix', compilation => {
			compilation.hooks.additionalChunkRuntimeRequirements.tap( 'ReactRefreshFix', chunk => {
				compilation.addRuntimeModule( chunk, new ReactRefreshFixRuntime() );
			} );
		} );
	}
}

module.exports = ReactRefreshFix;
